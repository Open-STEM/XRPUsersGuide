# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, WPI
# This file is distributed under the same license as the XRP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: XRP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-28 12:47-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: es\n"
"Language-Team: es <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../course/XRPCode.rst:2
msgid "XRPCode Integrated Development Environment"
msgstr ""

#: ../../course/XRPCode.rst:3
msgid ""
"XRPCode is a web-based development tool that is run in either the Google "
"Chrome or Microsoft Edge browsers. XRPCode can be used to create either "
"Python or Blockly language programs that run natively on the XRP control "
"board. Blockly programs are first translated to Python and then run. In "
"fact, you can view or even translate the Blockly program into a Python "
"program."
msgstr ""

#: ../../course/XRPCode.rst:8
msgid ""
"Run XRPCode by navigating to `XRPCode web site "
"<https://xrpcode.wpi.edu>`_."
msgstr ""

#: ../../course/XRPCode.rst:10
msgid ""
"If this is your first time accessing XRPCode or if there has been an "
"update, a changelog will be displayed. Read through the changelog to "
"learn what is new in the current release of XRPLib or the editor."
msgstr ""

#: ../../course/XRPCode.rst:14
msgid "Exploring the XRPCode user interface"
msgstr ""

#: ../../course/XRPCode.rst:19
msgid "There are 3 major window areas for XRPCode."
msgstr ""

#: ../../course/XRPCode.rst:21
msgid ""
"On the left (1) is the Filesystem window. This will show the files on "
"your XRP whenever an XRP is connected."
msgstr ""

#: ../../course/XRPCode.rst:23
msgid ""
"In the middle (2) is the editor. This is where you will be working on "
"your programs."
msgstr ""

#: ../../course/XRPCode.rst:25
msgid ""
"At the bottom (3) is the shell window. This is where print statement "
"output will be displayed. You can also use the shell as a command line to"
" write Python code as an interactive way to quickly test ideas."
msgstr ""

#: ../../course/XRPCode.rst:29
msgid "Connecting your XRP to XRPCode"
msgstr ""

#: ../../course/XRPCode.rst:30
msgid ""
"The XRP robot has a micro USB connector on the controller board that is "
"connected to your computers USB port with a cable."
msgstr ""

#: ../../course/XRPCode.rst:34
msgid ""
"Many USB cables are for power only and do not transmit data. You will "
"need a USB cable that can transfer data and power."
msgstr ""

#: ../../course/XRPCode.rst:38
msgid "Connecting to the XRP"
msgstr ""

#: ../../course/XRPCode.rst:39
msgid ""
"To establish the connection between the XRP robot and the computer, press"
" the 'CONNECT XRP' button. Often the connection will happen automatically"
" when the XRP is plugged in and XRPCode is started."
msgstr ""

#: ../../course/XRPCode.rst:45
msgid ""
"This will bring up a dialog that lets you select the computer's serial "
"port that XRPCode will connect to. In most cases, there will be just one "
"serial device, but if there are more, select the one that is for your XRP"
" robot. Click on the CONNECT button after selecting the desired serial "
"port."
msgstr ""

#: ../../course/XRPCode.rst:53
msgid ""
"When the connection is made, the 'CONNECT XRP' button will change to a "
"green 'RUN' button indicating that the connection has been made and a "
"program can be run. The Filesystem window will show the files on the "
"connected XRP."
msgstr ""

#: ../../course/XRPCode.rst:57
msgid ""
"If XRPCode cannot find your serial connection, or there are other "
"connection issues please refer to the troubleshooting section at the "
"bottom of this page."
msgstr ""

#: ../../course/XRPCode.rst:61
msgid "Using XRPCode"
msgstr ""

#: ../../course/XRPCode.rst:62
msgid ""
"Now that the robot is connected, this is a good time to write a short "
"program to learn about the editor."
msgstr ""

#: ../../course/XRPCode.rst:67
msgid ""
"In the editor area, there should be a window asking what type of editor "
"to use, either BLOCKLY or MICROPYTHON. (If this is not showing, click on "
"‘New File’ under the ‘File’ Menu) and select BLOCKLY."
msgstr ""

#: ../../course/XRPCode.rst:69
msgid "On the left of the editor is a palette of all the available blocks."
msgstr ""

#: ../../course/XRPCode.rst:75
msgid ""
"Notice that they are grouped by functionality. We recommend you click "
"through each section to get a sense of where blocks are."
msgstr ""

#: ../../course/XRPCode.rst:78
msgid ""
"In this example, we'll create a program that will turn a controller board"
" LED on and print a message in the XRPCode shell window a the bottom of "
"the screen."
msgstr ""

#: ../../course/XRPCode.rst:82
msgid "ico2"
msgstr ""

#: ../../course/XRPCode.rst:85
msgid "ico4"
msgstr ""

#: ../../course/XRPCode.rst:88
msgid ""
"Click on the \"Control Board\" tab and then click on the |ico2| block. "
"This will place this block onto your working canvas. You can move the "
"block around and place it where you like. Now click on the \"Text\" tab. "
"Then select the first block |ico4|. This block is now also on your "
"canvas. You can move this block around and place it right under the "
"|ico2| block. You will notice that as you get close to the bottom of the "
"|ico2| block it will show a yellow line indicating that the two fit "
"together. When you let go of the |ico4| block it should click together "
"with the |ico2| block. Feel free to change the “abc” to say what you want"
" to print; ideally something useful to the program. For example, you "
"might print something like “The LED is now on”."
msgstr ""

#: ../../course/XRPCode.rst:90
msgid ""
"Save this new program to the XRP. Under the ‘File’ menu select ‘Save to "
"XRP’."
msgstr ""

#: ../../course/XRPCode.rst:95
msgid ""
"A dialog will be displayed for you to give this program a name. Change "
"the *untitled* text to a name for your program such as ‘first program’ "
"and click 'OK'. The program has now been saved to the XRP. You will see "
"the name of your program in the Filesystem window on the left."
msgstr ""

#: ../../course/XRPCode.rst:97
msgid ""
"You can now press on the green “RUN” button, to run this program. Flip "
"the power switch on your XRP to 'on' and then click ‘OK’. If your XRP is "
"not turned on, a warning will pop up telling you to turn on the power "
"switch."
msgstr ""

#: ../../course/XRPCode.rst:101
msgid "You will notice a few things:"
msgstr ""

#: ../../course/XRPCode.rst:100
msgid ""
"The green LED next to where the USB cable connects to on the XRP will go "
"on for a little while and then turn back off."
msgstr ""

#: ../../course/XRPCode.rst:101
msgid ""
"The shell window at the bottom of XRPCode will print out your message "
"from the print statement."
msgstr ""

#: ../../course/XRPCode.rst:103
msgid ""
"You may have also noticed that the green ‘RUN’ button changed to a red "
"‘STOP’ button while your program was running and then turn back after."
msgstr ""

#: ../../course/XRPCode.rst:105
msgid "Clicking on the ‘STOP’ button will interrupt the program."
msgstr ""

#: ../../course/XRPCode.rst:107
msgid ""
"You might have noticed that the robot turns off when the program finishes"
" or is interrupted. This is so that at the end of each run, the XRP is "
"reset to a known state in preparation for the next time a program is "
"started."
msgstr ""

#: ../../course/XRPCode.rst:109
msgid ""
"The ‘View’ menu contents change depending on the language you are using. "
"For Blockly it will show View options for a Blockly program. Click on "
"‘View’ and then on ‘View Python’. This will bring up a view of the Python"
" code that is generated from your Blockly file. Let’s actually convert "
"this Blockly program program into a Python program. Click on ‘View’ and "
"then on “Convert to Python”."
msgstr ""

#: ../../course/XRPCode.rst:115
msgid ""
"XRPCode will first give you a warning to make sure you want to convert "
"the program as this cannot be undone. Click “OK”. It will do the "
"operation and you should notice two things have happened:"
msgstr ""

#: ../../course/XRPCode.rst:118
msgid "There is a new ‘trash’ directory on your XRP."
msgstr ""

#: ../../course/XRPCode.rst:120
msgid "Your program name now ends in .py instead of .blocks."
msgstr ""

#: ../../course/XRPCode.rst:122
msgid ""
"If you now go to the ‘View’ menu you will notice that the menu items have"
" changed to be specific to Python."
msgstr ""

#: ../../course/XRPCode.rst:127
msgid ""
"Close the 'View' menu and find the print statement in the program; it "
"should be the last line. Change the message that is between the quotes. "
"If you look at the file name tab at the top of the editor you will notice"
" a white dot at the end of the name. That means that this file has been "
"modified and has not yet been saved. Now if you click on the ‘RUN’ button"
" it will save your program and run it again. The message in the shell "
"window should be your new message."
msgstr ""

#: ../../course/XRPCode.rst:129
msgid ""
"You can close a file by clicking on the X next to the file name at the "
"top of the editor. If you want to open the program again you can double "
"click on the file name in the Filesystem window."
msgstr ""

#: ../../course/XRPCode.rst:131
msgid ""
"Congratulations, you have now learned how to create and run programs in "
"XRPCode!"
msgstr ""

#: ../../course/XRPCode.rst:134
msgid "Troubleshooting XRPCode connection issues"
msgstr ""

#: ../../course/XRPCode.rst:135
msgid "**Cannot see the serial port when connecting**"
msgstr ""

#: ../../course/XRPCode.rst:137
msgid "Be sure that the USB cable is a data cable and not just a power cable."
msgstr ""

#: ../../course/XRPCode.rst:139
msgid ""
"Unplug the XRP from the computer and check the connection of the cable on"
" the XRP side."
msgstr ""

#: ../../course/XRPCode.rst:141
msgid ""
"Toggle the power switch on the XRP off. Confirm that the sys LED is on. "
"This means it is properly receiving power from the USB cable. If the LED "
"is not on, try a different cable."
msgstr ""

#: ../../course/XRPCode.rst:143
msgid ""
"Make sure you are running either Google Chrome or Microsoft Edge "
"browsers. At the time of writing, only those browsers support serial "
"communication required for programming the XRP."
msgstr ""

#: ../../course/XRPCode.rst:146
msgid "**XRP was previously used for WPILib or some other purpose**"
msgstr ""

#: ../../course/XRPCode.rst:148
msgid ""
"In this case, XRPCode will try to load the current MicroPython firmware "
"onto it; just follow the instructions."
msgstr ""

#: ../../course/arm.rst:2
msgid "Using the arm"
msgstr ""

#: ../../course/arm.rst:5
msgid "Setting up the arm on the servo"
msgstr ""

#: ../../course/arm.rst:6
msgid ""
"The servo motor used to attach the arm on the XRP has about 200 degrees "
"of rotation and can move to a desired position using internal sensors. "
"When attaching the arm to the servo, it is important that one end of its "
"range is with the arm relatively horizontal inside the robot chassis and "
"the other end of the rotation outside the back of the robot for picking "
"up objects. The full range of arm rotation is shown in the two images "
"below."
msgstr ""

#: ../../course/arm.rst:20
msgid ""
"To position the arm correctly, install it in any position and use it to "
"rotate the servo to the full clockwise direction, as seen in the top "
"photo. Then reinstall the arm so that it is in the shown position. Then "
"the software will be able to move it to any position in between the two "
"photos above."
msgstr ""

#: ../../course/arm.rst:27
msgid "Moving the arm under program control"
msgstr ""

#: ../../course/arm.rst:28
msgid ""
"Use the servo class to move the servo motor to the desired position. The "
"method set_angle() sets the servo position to the desired angle. Below is"
" an example program that moves the servo position from one end of its "
"motion to the other."
msgstr ""

#: ../../course/arm.rst:39
msgid ""
"When the servo is controlled from the program, it is held in the position"
" it was last set to. To free it, that is to allow it to be moved by hand,"
" the free() function may be called, and the program will stop sending the"
" position signal to the servo."
msgstr ""

#: ../../course/building.rst:3
msgid "Building the XRP Robot"
msgstr ""

#: ../../course/building.rst:5
msgid ""
"Assembling the XRP robot is easy, but be sure to follow the steps here to"
" be sure that the wiring is correct and all the pieces are added "
"correctly to the chassis."
msgstr ""

#: ../../course/building.rst:8
msgid ""
"Below is a video provided by SparkFun Electronics showing how to assemble"
" the robot followed by a step by step set of written instructions below."
msgstr ""

#: ../../course/building.rst:17
msgid "The XRP kit (0:37)"
msgstr ""

#: ../../course/building.rst:19
msgid ""
"The XRP kit contains all the parts you need to assemble and use your "
"robot. You only need to supply 4 AA Batteries (preferably rechargeable) "
"and a micro USB cable to connect your computer to the robot. The contents"
" of the kit are shown to help you identify the parts during assembly."
msgstr ""

#: ../../course/building.rst:27
msgid "**Robot chassis**"
msgstr ""

#: ../../course/building.rst
msgid "Robot Chassis that holds all the components"
msgstr ""

#: ../../course/building.rst:29
msgid ""
"The chassis is a single-piece design that holds all of the robot "
"components. It is designed with a rail system that is designed to make "
"adding additional components easy and without the need for tools. All the"
" robot parts simply snap onto the chassis to make assembly as simple as "
"possible. You can also 3D print your own parts to attach to the chassis."
msgstr ""

#: ../../course/building.rst:35
msgid "**Robot controller**"
msgstr ""

#: ../../course/building.rst:37
msgid "Robot controller circuit board"
msgstr ""

#: ../../course/building.rst:41
msgid ""
"The robot controller has the RP2040 microprocessor that reads the sensors"
" inputs, runs the Python or Blockly program and drives the actuators "
"(motors). It also has additional components to sense accelerations and "
"headings of the robot, and communicate over WiFi with your laptop or "
"phone."
msgstr ""

#: ../../course/building.rst:46
msgid "**Electronics parts**"
msgstr ""

#: ../../course/building.rst:48
msgid "Electronics parts background"
msgstr ""

#: ../../course/building.rst:52
msgid ""
"The components in the bag of elctronics parts will each be shown "
"individually below."
msgstr ""

#: ../../course/building.rst:54
msgid "**Motors and cables**"
msgstr ""

#: ../../course/building.rst:56
msgid "Robot drive motors and cablese"
msgstr ""

#: ../../course/building.rst:60
msgid ""
"The motors are used to drive the robot and are attached to motor "
"controller through the associated cables."
msgstr ""

#: ../../course/building.rst:63
msgid "**Battery case**"
msgstr ""

#: ../../course/building.rst:65
msgid "Battery case for AA cells"
msgstr ""

#: ../../course/building.rst:69
msgid ""
"The battery case holds 4 AA batteries. You can use any standard alkaline "
"cells but rechargeable cells are prefered so that you don't have to keep "
"replacing them as they run out of energy."
msgstr ""

#: ../../course/building.rst:76
msgid "**Ultrasonic rangefinder**"
msgstr ""

#: ../../course/building.rst
msgid "Ultrasonic rangefinder"
msgstr ""

#: ../../course/building.rst:78
msgid ""
"The ultrasonic wire has two power wires labeled Vcc (red wire) and Gnd "
"(black wire). It also has two additional connections that operate the "
"sensor and get range data. These are trig (blue wire) and echo (yellow "
"wire). A common mistake when wiring this sensor is to get these two wired"
" incorrectly."
msgstr ""

#: ../../course/building.rst:86
msgid "**Rangefinder bracket**"
msgstr ""

#: ../../course/building.rst
msgid "Ultrasonic sensor bracket"
msgstr ""

#: ../../course/building.rst:91
msgid "**Reflectance sensor**"
msgstr ""

#: ../../course/building.rst
msgid "Reflelctance sensor for following or finding lines the robot drives over"
msgstr ""

#: ../../course/building.rst:97
msgid "**Reflectance sensor bracket**"
msgstr ""

#: ../../course/building.rst
msgid "Reflectance sensor bracket"
msgstr ""

#: ../../course/building.rst:102
msgid "**Sensor cables**"
msgstr ""

#: ../../course/building.rst
msgid "Cables for rangefinder and line follower sensors"
msgstr ""

#: ../../course/building.rst:104
msgid ""
"These cables connect the rangefinder and line following sensors to the "
"robot controller. **When installing these on the sensor end, you must be "
"careful to install the wires correctly, so be sure to carefully read the "
"instructions when attaching them.** Miswiring is the motors is the most "
"common cause of problems when assembling the XRP robot."
msgstr ""

#: ../../course/building.rst:112
msgid "**Tires (o-rings)**"
msgstr ""

#: ../../course/building.rst
msgid "O-rings to be used as tires over the wheels"
msgstr ""

#: ../../course/building.rst:114
msgid ""
"These o-rings are used to form tires to slip over the plastic wheels to "
"give the robot more traction, especially on smooth surfaces."
msgstr ""

#: ../../course/building.rst:120
msgid "**Servo motor**"
msgstr ""

#: ../../course/building.rst
msgid "Servo motor for the robot arm"
msgstr ""

#: ../../course/building.rst:125
msgid "**Servo arm**"
msgstr ""

#: ../../course/building.rst
msgid "Servo arm for lifting objects"
msgstr ""

#: ../../course/building.rst:130
msgid "**Servo bracket**"
msgstr ""

#: ../../course/building.rst
msgid "Servo bracket for mounting servo on back of robot"
msgstr ""

#: ../../course/building.rst:132
msgid ""
"The servo is a special type of motor such that when programmed with a "
"position the shaft will automatically move to the specified angle. This "
"is used to power the arm on your robot it can move to predetermined "
"angles all by itself."
msgstr ""

#: ../../course/building.rst:139
msgid "**Casters**"
msgstr ""

#: ../../course/building.rst
msgid "Nylon balls to use as front wheel casters"
msgstr ""

#: ../../course/building.rst:141
msgid ""
"The casters simply provide a low friction contact point for the front of "
"the robot to allow the two rear drive wheels to easily steer the robot "
"forwards, backwards, or any angle."
msgstr ""

#: ../../course/building.rst:145
msgid "Assembling the XRP Robot"
msgstr ""

#: ../../course/building.rst:147
msgid ""
"Assembling the XRP robot can be done without the use of tools with the "
"optional exception of screwing the servo arm to the servo. The total "
"process should take about 15 minutes, especially once you understand how "
"it goes together."
msgstr ""

#: ../../course/building.rst:151
msgid ""
"Each of the following sections has a time reference for the video at the "
"top of this page so you can see how to assemble that part. We suggest "
"that you view the entire video before starting the assembly so you can "
"get a good overview of how it goes together."
msgstr ""

#: ../../course/building.rst:156
msgid "Inserting the robot controller into the chassis (1:18)"
msgstr ""

#: ../../course/building.rst:160
msgid ""
"If you look at the connectors on the edge of the controller board labeled"
" \"Line\", \"extra\", \"qwiik\", and \"range\" have very small pieces of "
"tape covering the openings. Remove the tape from all four connectors "
"before inserting the board in the chassis."
msgstr ""

#: ../../course/building.rst:164
msgid ""
"Insert the robot controller circuit board into the chassis as shown in "
"the following picture. Observe the orientation of the board where the "
"battery connector (5) istowards the back of the robot as shown. Also the "
"top corners of the board are inserted part way into the corner pockets as"
" shown at (1) and (2). The clips in the chassis (3) and (4) are designed "
"to hold the chassis in place when it is pushed in."
msgstr ""

#: ../../course/building.rst:170
msgid "First step in installing the controller is to push in the top corners"
msgstr ""

#: ../../course/building.rst:174
msgid ""
"Then push down and foward on the back edges of the board so that the "
"front corners are completely seated in the pocket as shown at (1) and (2)"
" and the board snaps down as shown at (3) and (4) in the following "
"photograph. It might be helpful to view this part of the assembly in the "
"video from the top of this page."
msgstr ""

#: ../../course/building.rst:179
msgid ""
"Second stem in stalling the controller by pushing it forwards and down "
"into place"
msgstr ""

#: ../../course/building.rst:184
msgid "Installing the battery pack (1:39)"
msgstr ""

#: ../../course/building.rst:185
msgid "The battery pack is installed by:"
msgstr ""

#: ../../course/building.rst:187
msgid ""
"Inserting the cable through the cutout in the battery pack area in the "
"chassis."
msgstr ""

#: ../../course/building.rst:188
msgid ""
"Pushing the edge of the battery pack against the fingers in the chassis "
"which hold it in place."
msgstr ""

#: ../../course/building.rst:189
msgid ""
"Push the battery pack in place into the robot chassis so that it is full "
"seated."
msgstr ""

#: ../../course/building.rst:191
msgid "Cable inserted through the hole before inserting battery pack"
msgstr ""

#: ../../course/building.rst:191
msgid "Battery pack being inserted into the chassis."
msgstr ""

#: ../../course/building.rst:200
msgid "Adding the battery cover (2:29)"
msgstr ""

#: ../../course/building.rst:202
msgid ""
"The battery cover is very easy to install, just line up the two tabs on "
"the battery cover with the two slots in the chassis just outside of the "
"battery case. Then the clip snaps into place as you push the battery "
"cover into place."
msgstr ""

#: ../../course/building.rst:206
msgid "Battery cover tabs inserting into the chassis slots"
msgstr ""

#: ../../course/building.rst:206
msgid "Battery cover fully seated waiting to be snapped into place"
msgstr ""

#: ../../course/building.rst:215
msgid "Inserting the casters into the chassis (3:06)"
msgstr ""

#: ../../course/building.rst:216
msgid ""
"Install the white front casters (balls) into the chassis by pushing them "
"into place. Once they are installed, the casters should rotate freely."
msgstr ""

#: ../../course/building.rst:219
msgid "Nylon casters inserted into the chassis"
msgstr ""

#: ../../course/building.rst:224
msgid "Adding the motors"
msgstr ""

#: ../../course/building.rst:225
msgid ""
"The red hobby motors supplied with the kit include encoders (sensors to "
"measure wheel rotation) to make it easy to program the robot to drive for"
" specific distances and speeds. This will give your robots more control "
"and accuracy as your are writing progams to operate it."
msgstr ""

#: ../../course/building.rst:230
msgid "Putting the wheels onto the motors (3:22)"
msgstr ""

#: ../../course/building.rst:232
msgid ""
"The wheels press fit onto the white motor shafts. Notice that the motor "
"shafts have two flat sides that correspond to the flat edges in the "
"center of the wheel. The wheel is pressed over the motor shaft so that "
"the center part of the wheel that sticks out is closest to the motor body"
" and that the wheel is pressed all the way onto the motor shaft."
msgstr ""

#: ../../course/building.rst:237
msgid ""
"The wheel and motor showing the shaft flat sides and the corresponding "
"wheel shape"
msgstr ""

#: ../../course/building.rst:237
msgid "The wheels mounted on the motors"
msgstr ""

#: ../../course/building.rst:246
msgid "Putting the tires onto the wheels (3:45)"
msgstr ""

#: ../../course/building.rst:248
msgid ""
"The tires are rubber o-rings that slip into the groove on the outside rim"
" of the wheel. Simply stretch the o-ring to get it to move into place. "
"These will provide friction when the robot is driving, especially on "
"smooth surfaces."
msgstr ""

#: ../../course/building.rst:252
msgid "Photo of one tire installed and one on top of the wheel"
msgstr ""

#: ../../course/building.rst:257
msgid "Connecting the motor cables to the motors (3:52)"
msgstr ""

#: ../../course/building.rst:259
msgid ""
"The motor cables connect the motor to the robot controller so that it can"
" drive the drive the motors and receive data from the motor encoder "
"sensors that provide position and speed information for your robot "
"program. This encoders all the robot to drive at a desired speed and "
"drive for a desired distance."
msgstr ""

#: ../../course/building.rst:264
msgid ""
"The wider connector on the cable is inserted into the motor. Notice that "
"pins (wires) on the motor connector are closer to one side than the "
"other. Similarly, the holes on the connector attached to the cable are "
"closer to one side."
msgstr ""

#: ../../course/building.rst:268
msgid "The cables attach to the motors by inserting the connectors"
msgstr ""

#: ../../course/building.rst:273
msgid "Installing the motors into the chassis (4:09)"
msgstr ""

#: ../../course/building.rst:275
msgid ""
"The motors snap into the chassis from the bottom once the wheels and "
"cables are installed. The motor is oriented so that the wheel goes "
"through the slot on the chassis as shown in the picture. Ideally you "
"should push the wires from the motor through the opening in the chassis "
"to the top of the chassis so they can be attached to the robot "
"controller. Then seat the end of the motor opposite the cable end, then "
"snap the wheel side of the motor into place. Repeat for both motors."
msgstr ""

#: ../../course/building.rst:281
msgid "Motor is inserted from the cable end first"
msgstr ""

#: ../../course/building.rst:281
msgid "Motor is fully seated in the chassis"
msgstr ""

#: ../../course/building.rst:290
msgid "Photo of the controller board"
msgstr ""

#: ../../course/building.rst:291
msgid ""
"Many of the following instructions require attaching cables to the "
"connectors on the controller board on the robot. The printing on the "
"board identifying the purposes of each of the connectors and the pins is "
"very small to fit on the small board. To make assembly easier, refer to "
"the following photograph of the board if needed."
msgstr ""

#: ../../course/building.rst:300
msgid "Connecting the motor cables to the robot controller (4:43)"
msgstr ""

#: ../../course/building.rst:302
msgid ""
"The motor cables are connected to the white connectors on the side of the"
" chassis labeled Motor L and Motor R for the left and right motor cables."
msgstr ""

#: ../../course/building.rst:305
msgid "Left motor cable inserted in the controller board"
msgstr ""

#: ../../course/building.rst:305
msgid "Right motor cable inserted in the controller board"
msgstr ""

#: ../../course/building.rst:314
msgid "Adding the Sensors"
msgstr ""

#: ../../course/building.rst:315
msgid ""
"The line following sensor can detect lines on the driving surface that "
"have a different reflectivity. These are typically used in robot "
"applications to follow lines or locating interesting places on a board or"
" mat. It has two pairs of LEDs and photo sensors to emit infrared light "
"and measure the reflected brightness."
msgstr ""

#: ../../course/building.rst:320
msgid ""
"The ultrasonic rangefinder uses sound to measure the distance to objects "
"in front of the sensor. An ultrasonic (inaudible high frequency) short "
"sound is sent from one of the transducers which is reflected back by "
"nearby objects and received by the second transducer. The time of the "
"sound round-trip is measured to determine distance to nearby objects."
msgstr ""

#: ../../course/building.rst:326
msgid "Wiring the sensors (5:11)"
msgstr ""

#: ../../course/building.rst:327
msgid ""
"The sensor cable is connected to the line following (reflectance) sensor "
"as shown in the picture below. Be sure to observe the order and color of "
"the wires connecting to the sensor. The connectors simply push over the "
"sensor pins. Be sure that they are fully seated as shown in the picture "
"and video to ensure a good connection."
msgstr ""

#: ../../course/building.rst:332
msgid ""
"The cable attached to the reflectance sensor showing the order of the "
"individual wires"
msgstr ""

#: ../../course/building.rst:336
msgid ""
"The rangefinder is wired by attaching the four wires from the sensor "
"cable to the pins on the rangefinder as shown in the picture below. Be "
"sure to connect the wires to the pins in the right order."
msgstr ""

#: ../../course/building.rst:339
msgid "Reflectance sensor with wires attached"
msgstr ""

#: ../../course/building.rst:344
msgid "Attaching the brackets to the chassis (5:44)"
msgstr ""

#: ../../course/building.rst:345
msgid ""
"The rangefinder bracket is attached to the front of the chassis just "
"above the reflectance sensor as shown in the picture below."
msgstr ""

#: ../../course/building.rst:348
msgid "Rangefinder bracket attached to the chassis"
msgstr ""

#: ../../course/building.rst:352
msgid ""
"The reflectance sensor bracket is installed on the chassis as shown in "
"the picture below. The ball end of the bracket is inserted into the slot "
"in the front rail."
msgstr ""

#: ../../course/building.rst:355
msgid "The reflectance sensor attached to the chassis"
msgstr ""

#: ../../course/building.rst:360
msgid "Inserting the line follower into the bracket (6:19)"
msgstr ""

#: ../../course/building.rst:361
msgid ""
"The reflectance sensor is inserted into the bracket as shown in the "
"picture below. Also look at the side view of the assembly to see how the "
"sensor is correctly positioned in the bracket."
msgstr ""

#: ../../course/building.rst:364
msgid "Reflectance sensor inserted into the bracket"
msgstr ""

#: ../../course/building.rst:364
msgid "Side view of reflectance sensor showing how it fits into the bracket"
msgstr ""

#: ../../course/building.rst:373
msgid "Attaching the rangefinder to the bracket (6:38)"
msgstr ""

#: ../../course/building.rst:374
msgid "Attach the rangefinder to the bracket as shown in the picture below."
msgstr ""

#: ../../course/building.rst:376
msgid "Rangefinder mounted on the bracket and the chassis"
msgstr ""

#: ../../course/building.rst:382
msgid "Connecting the cables for the line follower and rangefinder (6:55)"
msgstr ""

#: ../../course/building.rst:383
msgid ""
"The cables from the reflectance sensor (line follower) and the "
"rangefinder are connected to the connectors on the controller board. "
"Notice that there are labels on the board for each of these cables to "
"help you get them into the right connectors. The line follower cable goes"
" into the connector labeled Line and the rangefinder goes into the "
"connector labeled Range. It is a good idea to put a small loop in the "
"wire that can be tucked into the chassis before connecting it to help "
"keep the wiring neat and less likely to get snagged."
msgstr ""

#: ../../course/building.rst:390
msgid ""
"The line follower cable inserted into the connector on the controller "
"board"
msgstr ""

#: ../../course/building.rst:390
msgid "The range finder cable inserted into the connector on the controller board"
msgstr ""

#: ../../course/building.rst:400
msgid "Attaching the servo"
msgstr ""

#: ../../course/building.rst:401
msgid ""
"The servo is used to rotate the arm to the desired position. It has the "
"advantage over a normal motor in that it has sensors inside of it to "
"allow it to move to a desired position that you can program."
msgstr ""

#: ../../course/building.rst:406
msgid "Attaching the servo bracket to the robot chassis (7:29)"
msgstr ""

#: ../../course/building.rst:407
msgid ""
"The servo is attached to the robot by first inserting the ball end of the"
" bracket into the upper slot on the back rail, then snapping the bottom "
"part of the bracket over the bottom part of the rail."
msgstr ""

#: ../../course/building.rst:410
msgid ""
"Inserting the ball end of the servo bracket into the slot into the top "
"slot on the chassis rail"
msgstr ""

#: ../../course/building.rst:410
msgid ""
"Pushing the bottom part of the servo bracket over the bottom part of the "
"chassis rail"
msgstr ""

#: ../../course/building.rst:419
msgid "Mounting the servo to the servo bracket (7:54)"
msgstr ""

#: ../../course/building.rst:420
msgid "The servo snaps into the servo bracket as shown in the photo below."
msgstr ""

#: ../../course/building.rst:422
msgid "The servo mounted in the bracket ready to snap onto the robot"
msgstr ""

#: ../../course/building.rst:427
msgid "Connecting the servo cable to the robot controller (8:06)"
msgstr ""

#: ../../course/building.rst:428
msgid ""
"The servo cable is connected to the slot labeled Servo 1 on the robot "
"controller board as shown in the photo below. Be sure to connect it as "
"shown with the black wire connecting to the Gnd terminal on the Robot "
"Controller board."
msgstr ""

#: ../../course/building.rst:432
msgid ""
"The servo cable is installed into the controller board. Make sure to "
"connect it as shown."
msgstr ""

#: ../../course/building.rst:437
msgid "Inserting the servo horn into the robot arm (8:27)"
msgstr ""

#: ../../course/building.rst:438
msgid ""
"The servo horn is the small white plastic arm that attaches to the servo "
"by pressing onto the servo shaft. There are several servo horns that come"
" with the servo accessories. The one that you should use has a hole for "
"attaching to the servo shaft at one end, and a small arm at the other "
"end. It gets installed into the slot at the end of the larger black servo"
" arm as shown in the picture below and the video. **Be sure to install "
"the servo arm so that it is oriented as shown in the photo, in particular"
" make sure that the mounting flange is facing the correct direction**."
msgstr ""

#: ../../course/building.rst:446
msgid ""
"Servo horn (white piece) from the bag of servo accessories is installed "
"in the servo arm"
msgstr ""

#: ../../course/building.rst:451
msgid "Mounting the arm to the servo (8:45)"
msgstr ""

#: ../../course/building.rst:452
msgid ""
"The servo arm simply presses onto the white shaft on the servo. The servo"
" shaft only has about 180 degrees of rotation so it's important to "
"install the arm so that it can move through its full range of motion "
"while mounted on the robot. Holding the servo so that it's flat with the "
"wires coming out to the left, the arm should be mounted so that it has "
"180 degrees of motion from front to back. That is the arm will never "
"travel below the level of the servo body. You can see how this is done by"
" looking at the video at the indicated time stamp. This image shows the "
"servo at the end of its travel inside the robot chassis. The other end of"
" the travel will be slightly below horizontal behind the robot."
msgstr ""

#: ../../course/building.rst:-1
msgid "Servo arm mounted at extreme end of the servo range"
msgstr ""

#: ../../course/building.rst:466
msgid "Initializing and testing your XRP (10:21)"
msgstr ""

#: ../../course/building.rst:467
msgid ""
"Refer to SparkFun's video at the top of this page to set up your XRP and "
"ensure that it's working correctly!"
msgstr ""

#: ../../course/building.rst:470
msgid ""
"Once your XRP is connected, skip to (12:44) in the video and follow along"
" with the built-in test to ensure that the sensors and motors are working"
" properly."
msgstr ""

#: ../../course/building.rst:474
msgid "Troubleshooting the robot build"
msgstr ""

#: ../../course/building.rst:475
msgid ""
"Generally the build of the robot is very strightforward, but from "
"feedback we have compiled this section that describes some of the common "
"issues we have seen as people are building the XRP."
msgstr ""

#: ../../course/building.rst:479
msgid ""
"Rangefinder or the line following sensors don't work in the Installation "
"Verification Test"
msgstr ""

#: ../../course/building.rst:480
msgid ""
"It is very easy to accidentally attach the rangefinder and line following"
" sensor cables to the wrong connectors on the controller board. Be sure "
"to verify that the rangefinder is in the connector marked \"Range\" and "
"the line following sensor is in the connector marked \"Line\"."
msgstr ""

#: ../../course/building.rst:484
msgid ""
"If the connectors are reversed and you have to remove them, **be sure to "
"only remove the connector by pulling on the plastic shell**. Do not pull "
"on the wires as you might accidently pull them out of the connector."
msgstr ""

#: ../../course/dashboard.rst:2
msgid "Creating a dashboard"
msgstr ""

#: ../../course/dashboard.rst:3
msgid ""
"A program can display a web page that can act as a dashboard or control "
"panel for your robot. The web page can be used for:"
msgstr ""

#: ../../course/dashboard.rst:6
msgid ""
"Program debugging by wirelessly displaying values such as errors, "
"messages about what the program is doing, sensor readings, and other "
"status as the robot is driving. This allows the XRP to output important "
"values without needing to be plugged in"
msgstr ""

#: ../../course/dashboard.rst:9
msgid ""
"Binding functions to web page buttons so that when pressed, the functions"
" are executed by the web server. Using this technique, your device can "
"act as a remote controller for your XRP. This is also a great technique "
"to test functions as you write them by executing them from the web "
"server."
msgstr ""

#: ../../course/dashboard.rst:14
msgid ""
"To create more graphically pleasing buttons for controlling your robot, "
"there are predefined buttons for forward, backward, left, right and stop "
"operation. These will display on the web page like a game controller "
"dashboard."
msgstr ""

#: ../../course/dashboard.rst:19
msgid ""
"Before starting the web server, you should define all the displayed "
"values, user buttons, and the driver panel."
msgstr ""

#: ../../course/dashboard.rst:22
msgid ""
"First, one (but not both) of the following two methods must be called to "
"initialize the network:"
msgstr ""

#: ../../course/dashboard.rst:29
msgid ""
"This opens an access point from the XRP board to be used as a captive "
"host. The network password is “remote.xrp”"
msgstr ""

#: ../../course/dashboard.rst:36
msgid ""
"This will connect to a wifi network with the given ssid and password. If "
"the connection fails, the board will disconnect from the network and "
"return."
msgstr ""

#: ../../course/dashboard.rst:39
msgid ""
"Then, XRPLib will create and start a web server using the robot built-in "
"WiFi connectivity when the Webserver class method is called:"
msgstr ""

#: ../../course/dashboard.rst:50
msgid ""
"Note that this will only suceed if one (not both) of the above two "
"methods is called first. This function call will:"
msgstr ""

#: ../../course/dashboard.rst:53
msgid ""
"Bring up the WiFi interface on the robot using a robot number parameter "
"to create a unique SSID. When a device (computer, phone, or tablet) "
"connects to that SSID from the network settings, it will then be on the "
"robot's local network and no longer on the internet."
msgstr ""

#: ../../course/dashboard.rst:58
msgid "Start listening on port 80 (HTTP) for a connection from a browser."
msgstr ""

#: ../../course/dashboard.rst:60
msgid ""
"Dynamically create a web page based on user programming that can have "
"driving controls, buttons corresponding to user functions, and display of"
" program data for debugging or robot monitoring."
msgstr ""

#: ../../course/dashboard.rst:64
msgid ""
"The user can then connect to the robot web server using a phone, tablet, "
"or computer to see the web page the robot program creates."
msgstr ""

#: ../../course/dashboard.rst:68
msgid ""
"If you connect to the robot to the computer you are using to programming "
"it, you might lose connectivity with the internet, so that XRPCode stops "
"working."
msgstr ""

#: ../../course/dashboard.rst:72
msgid "The user should enter the URL: ROBOT_URL."
msgstr ""

#: ../../course/dashboard.rst:75
msgid "Using the web server"
msgstr ""

#: ../../course/dashboard.rst:76
msgid ""
"The start_server() function will never return. Once your program calls "
"start_server(), the only way of executing code will be through the "
"generated program. The program will then be event-driven, that is, only "
"responding to pushbutton events from the web server."
msgstr ""

#: ../../course/dashboard.rst:82
msgid "Display running program data"
msgstr ""

#: ../../course/dashboard.rst:83
msgid ""
"A program can log any expression to the web server as a value by "
"supplying a text label for the value and the value itself."
msgstr ""

#: ../../course/dashboard.rst:86
msgid "Some examples are:"
msgstr ""

#: ../../course/dashboard.rst:99
msgid "Teleop driving from the dashboard"
msgstr ""

#: ../../course/dashboard.rst:100
msgid ""
"To drive the robot, a program can create a driving interface by binding "
"functions to left, right, forward, backward arrow buttons and a stop "
"button. If bound, these buttons will apear in a diamond pattern in the "
"browser and will call the bound functions when pressed."
msgstr ""

#: ../../course/dashboard.rst:105
msgid ""
"Here is an example of how to do set up those bindings using lambdas "
"(single line functions) that will operate a robot."
msgstr ""

#: ../../course/dashboard.rst:119
msgid ""
"By using the set_effort function, the robot will continue to drive after "
"a single button press until told to do something else."
msgstr ""

#: ../../course/dashboard.rst:123
msgid "Calling arbitrary functions from the dashboard"
msgstr ""

#: ../../course/dashboard.rst:124
msgid ""
"A program can create a button, that when pressed, will call a user "
"function to do any operation that is required."
msgstr ""

#: ../../course/dashboard.rst:137
msgid "Sample dashboard output"
msgstr ""

#: ../../course/dashboard.rst:138
msgid ""
"Below is an example of a dashboard that contains data logging, function "
"buttons, and driving controls. This is a screen capture from a cell phone"
" web browser where one can push buttons to run functions or use arrow "
"keys as well as viewing values from the program."
msgstr ""

#: ../../course/driving.rst:2
msgid "Driving"
msgstr ""

#: ../../course/driving.rst:5
msgid "Robot driving"
msgstr ""

#: ../../course/driving.rst:6
msgid ""
"The XRP is a mobile robot platform where driving from one place to "
"another is central to the design of any program. The differential_drive "
"class makes driving easy and has functions to:"
msgstr ""

#: ../../course/driving.rst:10
msgid ""
"**Set the motor efforts**, which is the power or average voltage applied "
"to the motors. The range of values can be set from -1 for full effort in "
"reverse, to 0 for no voltage or stopped, to +1 for full effort in the "
"forward direction."
msgstr ""

#: ../../course/driving.rst:15
msgid ""
"**Specify a speed to drive** in centimeters per second for each wheel. "
"The robot will try to maintain the specified speed as best it can using "
"the drive motor encoders."
msgstr ""

#: ../../course/driving.rst:19
msgid ""
"**Drive for a specified distance** using the drive motor encoders to "
"sense how far the robot has traveled."
msgstr ""

#: ../../course/driving.rst:22
msgid ""
"**Make point turns** for a desired number of degrees, either clockwise or"
" counterclockwise."
msgstr ""

#: ../../course/driving.rst:26
msgid "Effort vs. Speed"
msgstr ""

#: ../../course/driving.rst:27
msgid ""
"Throughout this document, we refer to the effort and speed of the "
"drivetrain. Although they seem similar, they are distinguished as "
"follows:"
msgstr ""

#: ../../course/driving.rst:35
msgid "**Effort**"
msgstr ""

#: ../../course/driving.rst:32
msgid ""
"The effort reflects the amount of power (or average voltage) supplied to "
"the motors. For a given effort, the speed will vary depending on things "
"like the driving surface, the battery voltage, and the slope (either "
"flat, uphill or downhill)."
msgstr ""

#: ../../course/driving.rst:41
msgid "**Speed**"
msgstr ""

#: ../../course/driving.rst:38
msgid ""
"The speed is the actual number of centimeters per second that the robot "
"will travel. When set in a program, the software will automatically "
"adjust the motor effort within its capability to keep the robot moving at"
" the desired speed."
msgstr ""

#: ../../course/driving.rst:44
msgid "Driving for a distance"
msgstr ""

#: ../../course/driving.rst:45
msgid ""
"The following program fragments show how to program the robot to drive "
"forward for 10 centimeters with an effort of 0.5 or 50 percent power. "
"This function uses the encoders to determine when the robot has traveled "
"the requested 10cm. In addition, this function will ensure that the robot"
" drives in a straight line by varying the speed of the left or right "
"motors if one is slightly faster."
msgstr ""

#: ../../course/driving.rst:54
msgid ""
"when requesting a distance to drive, the encoders are used to sense the "
"number of degrees of wheel rotation to complete the operation. If the "
"wheels slip while driving, the distance measurement will be incorrect."
msgstr ""

#: ../../course/driving.rst:57
msgid "Driving with an effort"
msgstr ""

#: ../../course/driving.rst:58
msgid ""
"This program will set the effort on the left and right drive motors to 50"
" percent, wait for 3 seconds, and stop the motors. The set_effort() "
"function has parameters for the left and right drive motors to allow them"
" to be set independently. No motor speed control is provided, so "
"different driving surfaces, slopes, or battery voltage will affect the "
"driving speed of the robot. The value of effort ranges from -1 for 100 "
"percent backward to 0 for no effort or stopped to +1 for 100 percent "
"effort forwards."
msgstr ""

#: ../../course/driving.rst:75
msgid "Driving at a speed"
msgstr ""

#: ../../course/driving.rst:76
msgid ""
"Set_speed() attempts to maintain some linear speed in centimeters per "
"second. The maximum speed is measured to be approximately 60cm/s tested "
"on a flat surface."
msgstr ""

#: ../../course/driving.rst:80
msgid ""
"This program will set the robot speed to 5 cm per second, in centimeters "
"per second, of the left and right wheels separately. If both motors are "
"set to the same speed, the robot will drive straight. If they are "
"different, the robot will turn in a direction away from the faster wheel."
msgstr ""

#: ../../course/driving.rst:93
msgid "Point turns"
msgstr ""

#: ../../course/driving.rst:97
msgid ""
"The robot can turn in place around a point directly centered between the "
"two drive wheels. This is done by driving the left and right drive motors"
" in opposite directions at the same speed. If the left wheel is spinning "
"in the forward direction, the robot will rotate clockwise or to the "
"right. If the right wheel is spinning in the forward direction, the robot"
" will rotate counterclockwise or to the left."
msgstr ""

#: ../../course/driving.rst:104
msgid ""
"The turn function specifies the number of degrees to turn, with a "
"positive number indicating a counterclockwise turn, and a negative number"
" indicating a clockwise turn. The second parameter specifies effort from "
"-1 to 1."
msgstr ""

#: ../../course/driving.rst:115
msgid ""
"When you use the turn function, the IMU (Inertial Measurement Unit) gyro "
"sensor on the robot will determine when the robot has completed the "
"requested turn. This means the turn will continue until complete and is "
"not affected by wheel slip."
msgstr ""

#: ../../course/driving.rst:121
msgid ""
"If you were to pick up the robot while it is doing a turn, the wheels "
"will continue turning until the gyro senses that the robot has turned the"
" desired number of degrees."
msgstr ""

#: ../../course/driving.rst:126
msgid "Swing turns"
msgstr ""

#: ../../course/driving.rst:127
msgid ""
"This type of turn is where one wheel moves forward, and the other is "
"stationary. The robot will pivot on the stationary wheel, making it the "
"center of rotation. The circle's diameter traveled by the moving wheel "
"will be twice the wheel track (the distance between the two wheels)."
msgstr ""

#: ../../course/driving.rst:137
msgid "Smooth turns"
msgstr ""

#: ../../course/driving.rst:138
msgid ""
"Smooth turns are where the two wheels move in the same direction so that "
"the robot drives in an arc, eventually completing a full circle. The "
"circle's radius depends on the speed difference between the two wheels. "
"The larger the difference, the smaller the circle diameter."
msgstr ""

#: ../../course/introduction.rst:5
msgid "Introduction"
msgstr ""

#: ../../course/introduction.rst:7
msgid ""
"The XRP (Experiential Robotics Platform) [beta], started by WPI and DEKA "
"Research & Development Corp., aims to level the STEM playing field "
"globally and create a future generation of STEM innovators and technology"
" leaders."
msgstr ""

#: ../../course/introduction.rst:11
msgid ""
"The robot kits you received are designed to operate autonomously and "
"perform basic tasks. Its simple, tool-free assembly means robots can be "
"built quickly, and replacement parts can be easily 3-D printed. As part "
"of this platform, WPI will provide virtual support through online courses"
" and will guide students and teachers through the new system, including "
"the ability to scale up using the same hardware with free software "
"updates."
msgstr ""

#: ../../course/introduction.rst:18
msgid ""
"The XRP platform is part of WPI's global STEM education initiative, which"
" will bring inspiration and possibility to STEM education in ways that "
"make it available to all."
msgstr ""

#: ../../course/introduction.rst:23
msgid "Two robots in one"
msgstr ""

#: ../../course/introduction.rst:24
msgid "The XRP can be used for two different applications:"
msgstr ""

#: ../../course/introduction.rst:26
msgid ""
"A **STEM learning platform using Python or Blockly** with custom tools "
"designed to learn and experiment with robotics. Included is a curriculum "
"to help learn about robotics and programming. This use of the XRP is "
"described in this document."
msgstr ""

#: ../../course/introduction.rst:29
msgid ""
"A robot to introduce new **FRC teams and team members to WPILib "
"programming** with the same tools, languages, and libraries used in "
"developing competition robots. To learn about using the XRP for the "
"*FIRST* Robotics Competition, you should refer to the `standard WPILib "
"documentation <https://docs.wpilib.org/en/latest/docs/xrp-"
"robot/index.html>`_."
msgstr ""

#: ../../course/introduction.rst:35
msgid "Software Tools"
msgstr ""

#: ../../course/introduction.rst:37
msgid ""
"There are several software tools available to the programmer for the XRP."
" Some are available, especially for the XRP and other general-purpose "
"tools that may also work with the XRP."
msgstr ""

#: ../../course/introduction.rst:41
msgid "Programming Languages"
msgstr ""

#: ../../course/introduction.rst:43
msgid "The XRP team supports two programming languages for the XRP:"
msgstr ""

#: ../../course/introduction.rst:52
msgid "**Blockly**"
msgstr ""

#: ../../course/introduction.rst:46
msgid ""
"A graphical programming system based on Scratch to make it easier to "
"start codingyour robot without the need to the syntax of Python. "
"Internally, a Blockly program is translated to Python and saved on the "
"robot. Users can even see the generated Python code to help them learn to"
" use the language themselves."
msgstr ""

#: ../../course/introduction.rst:56
msgid "**Python**"
msgstr ""

#: ../../course/introduction.rst:55
msgid ""
"An object-oriented text-based programming language used throughout "
"industry and taught in many classrooms."
msgstr ""

#: ../../course/introduction.rst:58
msgid ""
"Other languages include C and C++. There may be other languages that can "
"also work with the RP2040 microprocessor in the XRP."
msgstr ""

#: ../../course/introduction.rst:62
msgid "XRPCode"
msgstr ""

#: ../../course/introduction.rst:65
msgid ""
"The recommended programming tool for the XRP is `XRPCode "
"<https://xrpcode.wpi.edu>`_. It is a web-based single tool designed "
"specifically for the XRP to support programming in either Python or "
"Blockly. It also can check and update firmware and library versions on "
"the robot as new software releases become available. XRPCode is a web-"
"based programming system that operates inside the Google Chrome or "
"Microsoft Edge browsers, so users will always be running the most recent "
"version of the tool."
msgstr ""

#: ../../course/introduction.rst:79
msgid "XRPLib"
msgstr ""

#: ../../course/introduction.rst:80
msgid ""
"`XRPLib <https://open-stem.github.io/XRP_MicroPython/index.html>`_ is a "
"Python-based programming library that provides classes and functions to "
"make it easy to use all the features of the XRP Robot. XRPLib is "
"completely open source, so users can download the software to see how it "
"works. We also encourage community involvement through pull requests to "
"the library. However, we recommend contacting us before spending too much"
" time to ensure that your ideas are compatible with our plans and "
"development for XRPLib."
msgstr ""

#: ../../course/introduction.rst:87
msgid "Here are some primary features of the XRP:"
msgstr ""

#: ../../course/introduction.rst:89
msgid ""
"The default drive function to control speed, direction, and power applied"
" to the two motors. It can handle driving and turning, with and without "
"sensors such as the IMU, for making accurate point turns."
msgstr ""

#: ../../course/introduction.rst:91
msgid ""
"The sensors on the robot, such as the motor encoders, rangefinder, "
"reflectance sensor, and IMU (Inertial Measurement Unit), which can get "
"the robot heading and accelerations as it is driving."
msgstr ""

#: ../../course/introduction.rst:93
msgid ""
"The WiFi connection so that programs can create a web server on the robot"
" that can be used to display a dashboard on a connected phone, tablet, or"
" computer. It is designed for displaying program status, driving controls"
" for teleoperation, and buttons to run user functions when pressed for "
"more control of user robot programs."
msgstr ""

#: ../../course/introduction.rst:95
msgid ""
"Utility functions for sensing the user buttons, operating the LED, and "
"robot program timing"
msgstr ""

#: ../../course/introduction.rst:97
msgid ""
"Several small sample programs to help illustrate how the various "
"components are used to operate."
msgstr ""

#: ../../course/introduction.rst:103
msgid "Other tools and languages"
msgstr ""

#: ../../course/introduction.rst:105
msgid ""
"In addition to the supplied languages for the robot, users can program "
"the robot using other standard tools such as C, C++ and WPILib using "
"various IDEs like the Arduino IDE and Visual Studio Code. VS Code has "
"several plugins specially designed to support Python programming and the "
"Raspberry Pi Pico, which is the hardware that powers the XRP."
msgstr ""

#: ../../course/introduction.rst:111
msgid "Where to find the tools"
msgstr ""

#: ../../course/introduction.rst:113
msgid "XRPCode IDE: https://xrpcode.wpi.edu/"
msgstr ""

#: ../../course/introduction.rst:116
msgid ""
"XRP API Documentation: https://open-"
"stem.github.io/XRP_MicroPython/index.html"
msgstr ""

#: ../../course/introduction.rst:119
msgid "XRP Curriculum: https://introtoroboticsv2.readthedocs.io/en/latest/"
msgstr ""

#: ../../course/introduction.rst:124
msgid "Getting help"
msgstr ""

#: ../../course/introduction.rst:125
msgid ""
"We have set up a `Discourse server "
"<https://https://xrp.discourse.group>`_ where you can get help from our "
"team as well as members of the community using XRP robots."
msgstr ""

#: ../../course/miscellaneous.rst:2
msgid "Miscellaneous topics"
msgstr ""

#: ../../course/miscellaneous.rst:4
msgid "Operating the LED"
msgstr ""

#: ../../course/miscellaneous.rst:13
msgid "Waiting for a button press"
msgstr ""

#: ../../course/miscellaneous.rst:16
msgid "Feedback-based control"
msgstr ""

#: ../../course/miscellaneous.rst:20
msgid "Custom controllers"
msgstr ""

#: ../../course/miscellaneous.rst:21
msgid ""
"The set_speed() method of EncodedMotor uses a pretuned PID controller to "
"maintain the speed through adjusting the the raw effort. However, "
"through:"
msgstr ""

#: ../../course/miscellaneous.rst:24
msgid "encodedMotor.set_speed_controller(controller)"
msgstr ""

#: ../../course/miscellaneous.rst:26
msgid ""
"a custom controller can be specified. The method expects a Controller "
"object. The Controller abstract class is defined with the following three"
" methods:"
msgstr ""

#: ../../course/miscellaneous.rst:29
msgid "**update(error) -> float**"
msgstr ""

#: ../../course/miscellaneous.rst:31
msgid ""
"This method is called at every tick, and returns an output value given an"
" input error value. This would be where PID logic would take place, for "
"example."
msgstr ""

#: ../../course/miscellaneous.rst:34
msgid "**is_done() -> bool**"
msgstr ""

#: ../../course/miscellaneous.rst:36
msgid ""
"This is a getter method that returns True if the controller has reached "
"the target value, and False otherwise."
msgstr ""

#: ../../course/miscellaneous.rst:39
msgid "**clear_history()**"
msgstr ""

#: ../../course/miscellaneous.rst:41
msgid ""
"The intent of this method is to reset any internal state of the "
"controller, i.e. integral sum. This is called on the speed controller "
"when set_speed() is called on the encoded motor."
msgstr ""

#: ../../course/miscellaneous.rst:45
msgid ""
"By subclassing the Controller class and implementing these three methods,"
" a custom controller can be used to control the speed of each motor."
msgstr ""

#: ../../course/miscellaneous.rst:49
msgid "Inbuilt PID controller"
msgstr ""

#: ../../course/miscellaneous.rst:50
msgid ""
"The PID class is a library-provided subclass of the Controller class, and"
" provides a full PID implementation. The PID constructor takes in the "
"following parameters, each with default values:"
msgstr ""

#: ../../course/miscellaneous.rst:55
msgid "**kp** = 1.0"
msgstr ""

#: ../../course/miscellaneous.rst:55
msgid "Proportional gain constant"
msgstr ""

#: ../../course/miscellaneous.rst:58
msgid "**ki** = 0.0"
msgstr ""

#: ../../course/miscellaneous.rst:58
msgid "Integral gain constant"
msgstr ""

#: ../../course/miscellaneous.rst:61
msgid "**kd** = 0.0"
msgstr ""

#: ../../course/miscellaneous.rst:61
msgid "Derivative gain constant"
msgstr ""

#: ../../course/miscellaneous.rst:64
msgid "**minOutput** = 0.0"
msgstr ""

#: ../../course/miscellaneous.rst:64
msgid "Constrain output to this minimum value"
msgstr ""

#: ../../course/miscellaneous.rst:67
msgid "**maxOutput** = 1.0"
msgstr ""

#: ../../course/miscellaneous.rst:67
msgid "Constrain output to this maximum value"
msgstr ""

#: ../../course/miscellaneous.rst:70
msgid "**maxDerivative** = None"
msgstr ""

#: ../../course/miscellaneous.rst:70
msgid "Constrain derivative term to this maximum magnitude"
msgstr ""

#: ../../course/miscellaneous.rst:73
msgid "**tolerance** = 0.1"
msgstr ""

#: ../../course/miscellaneous.rst:73
msgid "Error tolerance for is_done()"
msgstr ""

#: ../../course/miscellaneous.rst:77
msgid "**toleranceCount** = 1"
msgstr ""

#: ../../course/miscellaneous.rst:76
msgid "Number of consecutive ticks within tolerance to return True for is_done()"
msgstr ""

#: ../../course/miscellaneous.rst:79
msgid ""
"The default set_speed() controller uses a PID controller with the default"
" parameters. However, it may be useful to pass in a PID object to "
"set_speed_controller() with customized parameters to fine-tune the "
"controller."
msgstr ""

#: ../../course/motors.rst:2
msgid "Motors"
msgstr ""

#: ../../course/motors.rst:4
msgid "Motor classes"
msgstr ""

#: ../../course/motors.rst:5
msgid ""
"The XRP has two drive motors connected to the ports Motor L and Motor R "
"on the robot controller board. The board also supports two additional "
"motors labeled Motor 3 and Motor 4. These motors can be used to create "
"additional mechanisms for the XRP."
msgstr ""

#: ../../course/motors.rst:10
msgid "There are four classes related to motors:"
msgstr ""

#: ../../course/motors.rst:14
msgid "**Motor**"
msgstr ""

#: ../../course/motors.rst:13
msgid ""
"The motor class handles a single motor with a single method for setting "
"the effort between -1 and 1."
msgstr ""

#: ../../course/motors.rst:19
msgid "**Encoder**"
msgstr ""

#: ../../course/motors.rst:17
msgid ""
"The encoder class is responsible for measuring the current position of a "
"motor. This is useful to derive the speed of the motor, or the distance "
"traveled by the motor."
msgstr ""

#: ../../course/motors.rst:26
msgid "**EncodedMotor**"
msgstr ""

#: ../../course/motors.rst:22
msgid ""
"Encoded motors contain a motor and an encoder, and has higher level logic"
" for functionality that incoporate both objects. This class supports "
"features like resetting and getting the motor position, setting the "
"effort and speed of the motor, and configuring what controller is used "
"for closed-loop speed control."
msgstr ""

#: ../../course/motors.rst:34
msgid "**MotorGroup**"
msgstr ""

#: ../../course/motors.rst:29
msgid ""
"It is often desirable to treat several motors as if they were one. For "
"example, in a four wheel drive robot, the left side motors usually get "
"the same settings when driving the robot. A motor_group is created with "
"multiple motors, and functionality like setting effort can be applied to "
"all the motors in the motor group."
msgstr ""

#: ../../course/motors.rst:36
msgid ""
"Since the XRP bot is built with an encoder on each motor, it usually is "
"not necessary to directly deal with Motor or Encoder objects. Instead, "
"use EncodedMotor or MotorGroup for higher level functionality."
msgstr ""

#: ../../course/motors.rst:41
msgid "Using EncodedMotor"
msgstr ""

#: ../../course/motors.rst:42
msgid ""
"Interacting with EncodedMotor objects is often the most convenient way to"
" control motors on the XRP. The XRPLib.defaults module provides two "
"ready-made EncodedMotor objects, left_motor and right_motor, which allow "
"for fully independent control over the drive motors of the robot."
msgstr ""

#: ../../course/motors.rst:47
msgid ""
"There are four motor controllers total on the XRP, numbered 1-4. 1 and 2 "
"are the left and right motors, and 3 and 4 are labeled on the robot "
"controller board. left_motor and right_motor objects are provided by "
"default in the XRPLib.defaults module. Let's take a look at how we can "
"use the left_motor object to set the left motor to an effort of 0.75."
msgstr ""

#: ../../course/motors.rst:60
msgid ""
"Alternatively, you may also construct your own EncodedMotor objects, "
"which is needed to control motors 3 and 4. The following code sets Motor "
"3 to an effort of 0.75."
msgstr ""

#: ../../course/motors.rst:67
msgid ""
"In Blockly, constructing motor objects is not necessary. Under the "
"\"Individual Motors\" category, each block takes in a parameter to "
"specify which motor to use. This is all that is needed to set Motor 3 to "
"an effort of 0.75 in Blockly:"
msgstr ""

#: ../../course/motors.rst:76
msgid "Methods for EncodedMotor objects"
msgstr ""

#: ../../course/motors.rst:78
msgid "**set_effort(effort_value)**"
msgstr ""

#: ../../course/motors.rst:80
msgid ""
"As seen earlier, this method spins the motor at some raw effort. The "
"effort value ranges from -1 to +1, where negative efforts spin the motor "
"in reverse, and positive efforts spin the motor forwards. An effort of 0 "
"stops the motor."
msgstr ""

#: ../../course/motors.rst:88
msgid ""
"The programs shown below set Motor 3 to 80 percent effort for 5 seconds, "
"then afterwards, back to 0 percent effort to stop the motor. This example"
" uses motor 3, but any motor can be used in its place."
msgstr ""

#: ../../course/motors.rst:99
msgid "**set_speed(speed_rpm)**"
msgstr ""

#: ../../course/motors.rst:101
msgid ""
"Unlike the Drivetrain object which uses cm/second, the motor objects "
"handle speed in rotations per minute. They reads from the encoder to "
"determine the current speed, and adjust based on a closed-loop "
"controller, which by default is a PID controller. Similarly to "
"set_effort(), the sign of the speed determines the direction of the "
"motor."
msgstr ""

#: ../../course/motors.rst:107
msgid "The example programs below set a speed of 60 rpm for the left motor:"
msgstr ""

#: ../../course/motors.rst:115
msgid "**set_speed_controller(controller)**"
msgstr ""

#: ../../course/motors.rst:117
msgid ""
"The set_speed() function relies on a controller to determine how to vary "
"the effort of the motor to maintain the specified speed. By default, the "
"controller is a PID controller, but it can be changed to any object that "
"implements the Controller abstract class."
msgstr ""

#: ../../course/motors.rst:122
msgid ""
"The example below sets the speed controller with custom PID tunings. For "
"more information on controllers, refer to the page under Miscellaneous "
"Topics. Currently, there is no support for custom controllers in Blockly."
msgstr ""

#: ../../course/motors.rst:132
msgid "**get_speed() -> float**"
msgstr ""

#: ../../course/motors.rst:134
msgid ""
"Returns the current speed of the motor in rotations per minute, as "
"measured by the encoder."
msgstr ""

#: ../../course/motors.rst:137
msgid "**get_position() -> float**"
msgstr ""

#: ../../course/motors.rst:139
msgid ""
"Returns the current position of the motor in rotations, as measured by "
"the encoder."
msgstr ""

#: ../../course/motors.rst:142
msgid "**get_count() -> integer**"
msgstr ""

#: ../../course/motors.rst:144
msgid ""
"Returns the current position of the motor in encoder counts, as measured "
"by the encoder."
msgstr ""

#: ../../course/motors.rst:147
msgid "**reset_encoder_position()**"
msgstr ""

#: ../../course/motors.rst:149
msgid ""
"Resets the encoder counts to 0. get_position() and get_count return the "
"difference in distance since the last reset."
msgstr ""

#: ../../course/sensors.rst:2
msgid "Sensing the environment"
msgstr ""

#: ../../course/sensors.rst:8
msgid "Measuring the distance to an object"
msgstr ""

#: ../../course/sensors.rst:9
msgid ""
"The XRP includes an ultrasonic rangefinder that can measure the distance "
"to objects in front of it.  The sensor has two transducers; one acts as a"
" speaker, and the other acts as a microphone. It does it by sending a "
"burst of ultrasonic sound out of the speaker that hits an object in front"
" of the robot. The sound reflects off the object back to the sensor and "
"is captured by the microphone. The time for that round trip determines "
"the distance to the object. Understanding how well the sound reflects off"
" various objects of different sizes, profiles, and materials is important"
" for using the sensor. A good exercise is to test the sensor by printing "
"returned values at various distances from any object you want the robot "
"to detect."
msgstr ""

#: ../../course/sensors.rst:26
msgid ""
"It is important to wire the sensor correctly, as described in the "
"assembly instructions, to ensure it works properly. Interchanging the "
"trigger and echo wires is a common error using that part."
msgstr ""

#: ../../course/sensors.rst:31
msgid ""
"XRPLib has a rangefinder class that takes care of the sending and "
"receiving signals to the sensor. All the program has to do is request the"
" distance, and the library returns it. There is a single method called "
"distance() that returns the distance to the nearest object in "
"centimeters. The range of operation is from 2cm to 4m."
msgstr ""

#: ../../course/sensors.rst:38
msgid "Example use of the rangefinder"
msgstr ""

#: ../../course/sensors.rst:39
msgid ""
"The following program drives the XRP forwards until the code detects an "
"object within 10cm of the ultrasonic rangefinder. Then it stops."
msgstr ""

#: ../../course/sensors.rst:49
msgid ""
"This program stops the motors when the object is detected. A better way "
"of solving the same problem might be to use proportional or PID control "
"to gradually bring the robot to a stop to avoid overshoot, where inertia "
"might carry the robot beyond the 10cm set point before it comes to rest."
msgstr ""

#: ../../course/sensors.rst:56
msgid "Following lines"
msgstr ""

#: ../../course/sensors.rst:64
msgid ""
"A reflectance sensor that can be used for line following is included with"
" the XRP. It has two pairs of LEDs and light sensors. The LEDs emit "
"infrared light that reflects off the driving surface. The light sensor "
"measure the reflected light intensity, which depends on the surface below"
" the sensor. Electrical tape is typically used to make a line that the "
"robot can follow and has a different reflectivity than the surface, "
"usually a whiteboard or tabletop. With a pair of sensors, the robot can "
"read the reflectance value and tell where it is relative to the taped "
"line."
msgstr ""

#: ../../course/sensors.rst:74
msgid ""
"The class reflectance has methods get_right() to retrieve the right "
"reflectance value and get_left() to retrieve the left reflectance value. "
"The reflectance ranges from 0 (white) to 1 (black)."
msgstr ""

#: ../../course/sensors.rst:79
msgid "Line following example program"
msgstr ""

#: ../../course/sensors.rst:80
msgid ""
"The following program uses proportional control with the line sensors to "
"follow a line across the driving surface for the robot. The Kp variable "
"sets the gain for the controller."
msgstr ""

